grammar SpdxGrammar

  rule spdx_expression
    compound_expression / none / no_assertion
  end

  rule compound_expression
    '(' body ')' <CompoundExpression>
  end

  rule body
    ( compound_expression / and / or / with / license_ref / document_ref / license )* <Body>
  end

  rule and
    space "AND" space !reserve_words <LogicalAnd>
  end

  rule or
    space "OR" space !reserve_words <LogicalOr>
  end

  rule with
    space "WITH" space license_exception <With>
  end

  rule license
    [a-zA-Z0-9\-\.\+]+ &{|seq| Spdx.license_exists?(seq.first.text_value) || Spdx.license_exists?(seq.first.text_value.delete_suffix('+')) }  <License>
  end

  rule license_ref
    "LicenseRef-" [a-zA-Z0-9\-\.]+ <LicenseRef>
  end

  rule document_ref
    "DocumentRef-" [a-zA-Z0-9\-\.]+ ":" license_ref <DocumentRef>
  end

  rule license_exception
    [a-zA-Z0-9\-\.]+ &{|seq| Spdx.exception_exists?(seq.first.text_value) } <LicenseException>
  end

  rule reserve_words
    "AND" / "OR" / "WITH"
  end

  rule none
    "NONE" <None>
  end

  rule no_assertion
    "NOASSERTION" <NoAssertion>
  end

  rule space
    [\s]+
  end

end
